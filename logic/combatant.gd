# res://logic/combatant.gd
extends Object
class_name Combatant

var combatant_name: String = "Default Combatant"
var max_hp: int = Constants.STARTING_HP
var current_hp: int = Constants.STARTING_HP
var mana: int = Constants.STARTING_MANA

var library: Array[CardResource] = []
var graveyard: Array[CardResource] = []
var lanes: Array = [] # Will hold SummonInstance or null

var battle_instance: Battle # Reference to the battle for events
var opponent: Combatant # Reference to the opponent

func _init():
	lanes.resize(Constants.LANE_COUNT) # Initialize lanes array with nulls
	lanes.fill(null)

func setup(deck_res: Array[CardResource], start_hp: int, c_name: String, battle_ref: Battle, opp_ref: Combatant):
	self.library = deck_res.duplicate() # Use a copy
	self.max_hp = start_hp
	self.current_hp = start_hp
	self.combatant_name = c_name
	self.battle_instance = battle_ref
	self.opponent = opp_ref
	self.mana = Constants.STARTING_MANA
	print("%s setup complete. Deck size: %d" % [combatant_name, library.size()])

func take_damage(amount: int, source = null) -> bool: # Returns true if defeated
	print("%s takes %d damage" % [combatant_name, amount])
	current_hp -= amount
	# TODO: Generate hp_change event via battle_instance.add_event(...)
	if current_hp <= 0:
		current_hp = 0
		print("%s defeated!" % combatant_name)
		return true
	return false

func heal(amount: int):
	print("%s heals %d HP" % [combatant_name, amount])
	current_hp = min(current_hp + amount, max_hp)
	# TODO: Generate hp_change event

func gain_mana(amount: int):
	var old_mana = mana
	mana = min(mana + amount, Constants.MAX_MANA)
	print("%s gains %d mana. Total: %d" % [combatant_name, amount, mana])
	# TODO: Generate mana_change event if mana != old_mana

func pay_mana(amount: int) -> bool:
	if mana >= amount:
		var old_mana = mana
		mana -= amount
		print("%s pays %d mana. Remaining: %d" % [combatant_name, amount, mana])
		# TODO: Generate mana_change event if mana != old_mana
		return true
	return false

func add_card_to_graveyard(card_res: CardResource, from_zone: String):
	print("Adding %s to %s's graveyard from %s" % [card_res.card_name, combatant_name, from_zone])
	graveyard.push_back(card_res)
	# TODO: Generate card_moved event

func remove_card_from_library() -> CardResource:
	if not library.is_empty():
		var card = library.pop_front()
		print("Removing %s from %s's library top" % [card.card_name, combatant_name])
		# TODO: Generate card_moved event (library -> play)
		return card
	return null

func find_first_empty_lane() -> int:
	return lanes.find(null) # Returns index or -1

func place_summon_in_lane(summon_instance, lane_index: int):
	if lane_index >= 0 and lane_index < Constants.LANE_COUNT and lanes[lane_index] == null:
		lanes[lane_index] = summon_instance
		print("Placed summon in %s's lane %d" % [combatant_name, lane_index])
		# summon_arrives event generated by Battle logic after placement
	else:
		printerr("Failed to place summon in %s's lane %d" % [combatant_name, lane_index])

func remove_summon_from_lane(lane_index: int):
	if lane_index >= 0 and lane_index < Constants.LANE_COUNT and lanes[lane_index] != null:
		print("Removing summon from %s's lane %d" % [combatant_name, lane_index])
		lanes[lane_index] = null
	else:
		printerr("Failed to remove summon from %s's lane %d" % [combatant_name, lane_index])

# --- Add other methods like library/graveyard manipulation as needed ---
